---
- name: Clone the GitHub repository
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ clone_dir }}"
    version: main

- name: Verify the repository has been cloned
  command: ls "{{ clone_dir }}"
  register: repo_contents

- name: Display the contents of the cloned repository
  debug:
    msg: "Repository contents: {{ repo_contents.stdout }}"
- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Python 3
  apt:
    name: python3
    state: present

- name: Install pip3
  apt:
    name: python3-pip
    state: present

- name: Install python3 venv
  apt:
    name: python3-venv
    state: present

- name: Verify Python 3 installation
  command: python3 --version
  register: python3_version

- name: Display Python 3 version
  debug:
    msg: "Python 3 version: {{ python3_version.stdout }}"

- name: Verify pip3 installation
  command: pip3 --version
  register: pip3_version

- name: Display pip3 version
  debug:
    msg: "pip3 version: {{ pip3_version.stdout }}"

- name: Verify python3-venv installation
  command: python3 -m venv --help
  register: venv_help

- name: Display python3-venv help
  debug:
    msg: "python3-venv help: {{ venv_help.stdout }}"
- name: Ensure required packages are installed
  apt:
    name:
      - git
      - python3
      - python3-pip
      - python3-venv
    state: present
    update_cache: yes

- name: Create a Python virtual environment
  command: python3 -m venv "{{ virtualenv_dir }}"
  args:
    creates: "{{ virtualenv_dir }}"

- name: Install Python dependencies
  pip:
    requirements: "{{ app_dir }}/requirements.txt"
    virtualenv: "{{ virtualenv_dir }}"

- name: Apply migrations
  command: "{{ virtualenv_dir }}/bin/python manage.py migrate"
  args:
    chdir: "{{ app_dir }}"

- name: Collect static files
  command: "{{ virtualenv_dir }}/bin/python manage.py collectstatic --noinput"
  args:
    chdir: "{{ app_dir }}"

- name: Check if Django superuser exists
  command: >
    {{ virtualenv_dir }}/bin/python manage.py shell -c
    "from django.contrib.auth import get_user_model; exit(0) if get_user_model().objects.filter(username='admin').exists() else exit(1)"
  args:
    chdir: "{{ app_dir }}"
  register: superuser_check
  ignore_errors: true

- name: Create Django superuser (non-interactive)
  command: "{{ virtualenv_dir }}/bin/python manage.py createsuperuser --noinput --username=admin --email=admin@example.com"
  args:
    chdir: "{{ app_dir }}"
  environment:
    DJANGO_SUPERUSER_PASSWORD: "adminpassword"
  when: superuser_check.rc != 0

- name: Start Django development server
  command: "{{ virtualenv_dir }}/bin/python manage.py runserver 127.0.0.1:8000"
  args:
    chdir: "{{ app_dir }}"
  async: 300
  poll: 0

- name: timeout for check
  pause:
    seconds: 10

- name: Check app running
  uri:
    url: http://127.0.0.1:8000
    return_content: yes
  register: app_response

- name: Output main page content
  debug:
    var: app_response.content